{"version":3,"sources":["components/Card/Cards.module.css","components/Card/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","index.js","app.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","assets/corona.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","style","borderBottom","cx","card","infected","CardContent","Typography","color","gutterBottom","varient","start","end","value","duration","separator","Date","toDateString","api","fetchData","country","a","changableurl","axios","get","modifiedData","dailyData","map","total","date","reportDate","getCountries","countries","Chart","useState","dailyDataVal","setDailyData","useEffect","fetchDailyData","LineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","BarChart","lables","options","legend","display","title","text","CountryPicker","handleCountrySelect","setCountries","fetchCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","name","App","state","fetchDataVal","setState","fetchedData","this","src","coronaImg","classNames","alt","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e3ac96a3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3fAV9\",\"card\":\"Cards_card__2G4UW\",\"infected\":\"Cards_infected__1l909\",\"recovered\":\"Cards_recovered__1C0YS\",\"deaths\":\"Cards_deaths__2pHzL\"};","import React from \"react\";\r\nimport { Card, Grid, Typography, CardContent } from \"@material-ui/core\";\r\nimport CountUp from 'react-countup';\r\nimport styles from './Cards.module.css';\r\nimport cx from \"classnames\";\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    console.log(confirmed)\r\n    if (!confirmed) return \"loading...\";\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} style={{ borderBottom: \"10px solid rgba(0, 0, 255, 0.5)\" }} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography varient=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography varient=\"body2\">No. of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} style={{ borderBottom: \"10px solid rgba(0, 255, 0, 0.5)\" }} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography varient=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={recovered.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography varient=\"body2\">No. of recovered cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} style={{ borderBottom: \"10px solid rgba(255, 0, 0, 0.5)\" }} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography varient=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={deaths.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography varient=\"body2\">No. of deaths due to COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from \"axios\";\r\n\r\nconst api = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n    let changableurl = api;\r\n    if (country) {\r\n        changableurl = `${api}/countries/${country}`;\r\n    }\r\n    try {\r\n        const { data: { deaths, recovered, confirmed, lastUpdate } } = await axios.get(changableurl);\r\n        const modifiedData = {\r\n            deaths,\r\n            recovered,\r\n            confirmed,\r\n            lastUpdate,\r\n        }\r\n        console.log(modifiedData)\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const dailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${api}/daily`);\r\n        const modifiedData = data.map(dailyData => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\n\r\nexport const getCountries = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${api}/countries`)\r\n        return data.countries\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { dailyData } from \"../../api/index\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport { StylesProvider } from \"@material-ui/core\";\r\nimport styles from \"./Chart.module.css\";\r\n\r\nconst Chart = ({ data: { confirmed, deaths, recovered }, country }) => {\r\n    const [dailyDataVal, setDailyData] = useState([])\r\n    useEffect(() => {\r\n        const fetchDailyData = async () => {\r\n            setDailyData(await dailyData())\r\n\r\n        }\r\n        fetchDailyData();\r\n    }, []);\r\n    const LineChart = (\r\n        dailyDataVal.length ?\r\n            <Line\r\n                data={{\r\n                    labels: dailyDataVal.map(({ date }) => date),\r\n                    datasets: [{\r\n                        data: dailyDataVal.map(({ confirmed }) => confirmed),\r\n                        label: \"Infected\",\r\n                        borderColor: \"#3333ff\",\r\n                        fill: true\r\n                    }, {\r\n                        data: dailyDataVal.map(({ deaths }) => deaths),\r\n                        label: \"Deaths\",\r\n                        borderColor: \"red\",\r\n                        backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                        fill: true\r\n                    },]\r\n                }}\r\n            /> :\r\n            null\r\n    )\r\n    const BarChart = (\r\n        confirmed ?\r\n            (\r\n                <Bar\r\n                    data={{\r\n                        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n                        datasets: [{\r\n                            lables: 'People',\r\n                            backgroundColor: [\r\n                                'rgba(0, 0, 255, 0.5)',\r\n                                'rgba(0, 255, 0, 0.5)',\r\n                                'rgba(255, 0, 0, 0.5)'\r\n                            ],\r\n                            data: [confirmed.value, recovered.value, deaths.value]\r\n                        }]\r\n                    }}\r\n                    options={{ legend: { display: false }, title: { display: true, text: `Current state in ${country}` } }}\r\n                />\r\n            ) : null\r\n    )\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? BarChart : LineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Chart;","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport styles from \"./CountryPicker.module.css\";\r\nimport { getCountries } from \"../../api\"\r\nconst CountryPicker = ({ handleCountrySelect }) => {\r\n    const [countries, setCountries] = useState([])\r\n    useEffect(() => {\r\n        const fetchCountries = async () => {\r\n            setCountries(await getCountries())\r\n        }\r\n        fetchCountries()\r\n    }, [])\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={e => handleCountrySelect(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {\r\n                    countries.map(country => (<option value={country.name}>{country.name}</option>))\r\n                }\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React, { Component } from \"react\";\r\nimport { Cards, Chart, CountryPicker } from './components';\r\nimport { fetchData, dailyData } from \"./api\";\r\nimport styles from \"./app.module.css\";\r\nimport coronaImg from \"./assets/corona.png\"\r\nclass App extends Component {\r\n    state = {\r\n        data: {},\r\n        country: \"\"\r\n    }\r\n    async componentDidMount() {\r\n        const fetchedData = await fetchData();\r\n        this.setState({ data: fetchedData });\r\n    }\r\n\r\n    handleCountrySelect = async (country) => {\r\n        console.log(country)\r\n        const fetchDataVal = await fetchData(country)\r\n        this.setState({ data: fetchDataVal, country: country })\r\n    }\r\n\r\n    render() {\r\n        const { data } = this.state\r\n        return (\r\n            <div className={styles.container}>\r\n                <img src={coronaImg} classNames={styles.coronaImg} alt=\"COVID-19\" />\r\n                <Cards data={data} />\r\n                <CountryPicker handleCountrySelect={this.handleCountrySelect} />\r\n                <Chart data={this.state.data} country={this.state.country} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"))","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__Mxukc\",\"coronaImg\":\"app_coronaImg__19kj0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__nFQtI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__QctBz\"};","module.exports = __webpack_public_path__ + \"static/media/corona.d7265326.png\";"],"sourceRoot":""}